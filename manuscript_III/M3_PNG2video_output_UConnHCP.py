# -*- coding: utf-8 -*-
"""M3_PNG2video_output_UCONNHCP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G9qo3clEIbE36cyBO3FaCxhtXZWZqw2d
"""



import matplotlib.pyplot as plt
from matplotlib import animation
from IPython.display import display, HTML
import glob
import os
import imageio
from tqdm import trange

# bring in a list of images and write to an output file

def make_movie_mp4(image_array, output_file):
    dpi = 200
    xpixels, ypixels = image_array[0].shape[0], image_array[0].shape[1]
    
    # make frames with each figure being the exact dimensions of our plots
    fig = plt.figure(figsize=(ypixels/dpi, xpixels/dpi), dpi=dpi)
    im = plt.figimage(image_array[0])

    def animate(i):
        im.set_array(image_array[i])
        return (im)

    mywriter = animation.FFMpegWriter(fps=24, bitrate=-1)
    anim = animation.FuncAnimation(fig, animate, frames=len(image_array), interval=60)
    anim.save(output_file,mywriter)

    return anim

def output_movie_mp4(image_dir, anim_dir, output_file):
  # Go through each filename and add it to our image stack
  # filenames = sorted(glob.glob(os.path.join(image_dir + '*.png')))
  # filenames = glob.glob(os.path.join(image_dir + '*.png'))
  filenames = []
  for j in range(501): filenames.append(image_dir+str(j)+'.png')
  
  images = []
  for i in trange(len(filenames)):

      # this checks to make sure there's more than 0 bytes in the filename
      if os.path.getsize(filenames[i]) > 10:
          images.append(imageio.imread(filenames[i]))

  # use our function to make the movie
  anim = make_movie_mp4(images, anim_dir + output_file + '.mp4')

folder_name = r'/gpfs/sharedfs1/alb16177/vap24003/OutputData/'
image_dir = folder_name+'20250810_Confine_CP_SI/'
anim_dir = folder_name+'20250907_Confine_CP_SI_videos/'
for i in range(0,2400,100):
  for j in range(0,2100,100):
    print('Make video: I:'+str(j)+', E:'+str(i))
    label = 'I_'+str(j)+'_E_'+str(i)
    subfolder = label + '/fig_anime/'
    output_file = 'video_' + label
    output_movie_mp4(image_dir+subfolder, anim_dir, output_file)





